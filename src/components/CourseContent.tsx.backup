import React, { useState } from 'react';
import { ChevronDown, Network, Globe, Shield, Terminal, Settings, CheckCircle } from 'lucide-react';
import { useScrollAnimation } from '../hooks/useScrollAnimation';
import type { CourseModule } from '../types';

const CourseContent: React.FC = () => {
  const [openModule, setOpenModule] = useState<string | null>('fundamentals');
  const { isVisible, elementRef } = useScrollAnimation();

  const modules: CourseModule[] = [
    {
      id: 'fundamentals',
      title: 'Networking Fundamentals',
      description: 'Master the core concepts that form the foundation of all networking',
      icon: 'globe',
      topics: [
        'OSI and TCP/IP Model Deep Dive',
        'Network Topologies and Architectures',
        'Ethernet Standards and Frame Structure',
        'Collision vs Broadcast Domains',
        'Network Protocols Overview'
      ]
    },
    {
      id: 'ip-addressing',
      title: 'IP Addressing & Subnetting',
      description: 'Complete mastery of IP addressing, subnetting, and VLSM',
      icon: 'network',
      topics: [
        'IPv4 and IPv6 Addressing',
        'Subnet Mask Calculations',
        'VLSM and CIDR Implementation',
        'Private vs Public IP Ranges',
        'IP Address Planning and Design'
      ]
    },
    {
      id: 'routing-switching',
      title: 'Routing & Switching',
      description: 'Learn how data flows through networks via routers and switches',
      icon: 'terminal',
      topics: [
        'Static and Dynamic Routing',
        'Routing Protocols (RIP, OSPF, EIGRP)',
        'Switch Operations and MAC Tables',
        'VLAN Configuration and Trunking',
        'Spanning Tree Protocol (STP)'
      ]
    },
    {
      id: 'nat-pat',
      title: 'NAT & Port Translation',
      description: 'Understand how private networks connect to the internet',
      icon: 'shield',
      topics: [
        'Static and Dynamic NAT',
        'Port Address Translation (PAT)',
        'NAT Overload Configuration',
        'NAT Troubleshooting Techniques',
        'Security Implications of NAT'
      ]
    },
    {
      id: 'troubleshooting',
      title: 'Network Troubleshooting',
      description: 'Real-world problem-solving techniques and tools',
      icon: 'settings',
      topics: [
        'Systematic Troubleshooting Methodology',
        'Command Line Tools (ping, traceroute, netstat)',
        'Wireshark Packet Analysis',
        'Common Network Issues and Solutions',
        'Performance Optimization Techniques'
      ]
    }
  ];

  const getIcon = (iconName: string) => {
    switch (iconName) {
      case 'globe': return Globe;
      case 'network': return Network;
      case 'terminal': return Terminal;
      case 'shield': return Shield;
      case 'settings': return Settings;
      default: return Globe;
    }
  };

  const toggleModule = (moduleId: string) => {
    setOpenModule(openModule === moduleId ? null : moduleId);
  };

  return (
    <section className="py-24 bg-gradient-to-b from-slate-900 to-slate-950">
      <div className="max-w-6xl mx-auto px-6">
        <div 
          ref={elementRef}
          className={`transform transition-all duration-1000 ${
            isVisible ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0'
          }`}
        >
          {/* Section Header */}
          <div className="text-center mb-20">
            <div className="inline-flex items-center space-x-2 bg-indigo-500/10 border border-indigo-500/20 rounded-full px-4 py-2 mb-6">
              <CheckCircle className="w-4 h-4 text-indigo-400" />
              <span className="text-indigo-300 text-sm font-medium tracking-wide">COMPREHENSIVE CURRICULUM</span>
            </div>
            <h2 className="text-4xl md:text-6xl font-black text-white mb-6">
              Course <span className="text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-purple-400">Content</span>
            </h2>
            <p className="text-xl text-white/60 max-w-3xl mx-auto">
              From networking basics to advanced troubleshooting - everything you need in one day
            </p>
          </div>

          {/* Course Modules */}
          <div className="space-y-4">
            {modules.map((module, index) => {
              const IconComponent = getIcon(module.icon);
              const isOpen = openModule === module.id;
              
              return (
                <div 
                  key={module.id}
                  className={`group bg-white/5 backdrop-blur-xl border rounded-2xl transition-all duration-500 hover:bg-white/10 ${
                    isOpen 
                      ? 'border-violet-500/50 shadow-2xl shadow-violet-500/10' 
                      : 'border-white/10 hover:border-white/20'
                  }`}
                >
                  <button
                    onClick={() => toggleModule(module.id)}
                    className="w-full p-6 text-left flex items-center justify-between"
                  >
                    <div className="flex items-center space-x-6">
                      <div className={`w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300 ${
                        isOpen 
                          ? 'bg-gradient-to-br from-violet-500 to-purple-500 shadow-lg' 
                          : 'bg-white/10 group-hover:bg-white/20'
                      }`}>
                        <IconComponent className={`w-7 h-7 ${isOpen ? 'text-white' : 'text-violet-400'}`} />
                      </div>
                      <div>
                        <h3 className="text-2xl font-bold text-white group-hover:text-violet-300 transition-colors duration-300">
                          {module.title}
                        </h3>
                        <p className="text-white/60 mt-1 text-lg">{module.description}</p>
                      </div>
                    </div>
                    <ChevronDown 
                      className={`w-6 h-6 text-violet-400 transition-transform duration-300 ${
                        isOpen ? 'transform rotate-180' : ''
                      }`} 
                    />
                  </button>
                  
                  <div className={`overflow-hidden transition-all duration-500 ${
                    isOpen ? 'max-h-96 pb-6' : 'max-h-0'
                  }`}>
                    <div className="px-6">
                      <div className="border-t border-white/10 pt-6">
                        <div className="grid md:grid-cols-2 gap-4">
                          {module.topics.map((topic, topicIndex) => (
                            <div key={topicIndex} className="flex items-start space-x-3 p-3 rounded-xl bg-white/5 hover:bg-white/10 transition-colors duration-200">
                              <CheckCircle className="w-5 h-5 text-emerald-400 mt-0.5 flex-shrink-0" />
                              <span className="text-white/80 leading-relaxed">{topic}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </section>
  );
};

export default CourseContent;